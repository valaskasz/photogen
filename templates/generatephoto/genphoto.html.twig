{% extends 'base.html.twig' %}

{% block title %}Hello GeneratephotoController!{% endblock %}

{% block body %}


<div class="row" id="myapp">
  <div class="col-sm-5">
    <form method="post" action="{{ path('app_generatephoto') }}">
      <div class="mb-3">
        <label for="imageModel" class="form-label">Select Image generator model</label>

        <div >
        <div class="dropdown">
            <button 
            class="btn btn-secondary dropdown-toggle d-flex align-items-center" 
            type="button" 
            id="imageDropdown" 
            data-bs-toggle="dropdown" 
            aria-expanded="false"
            >
            <img 
                v-if="selectedModelImage" 
                :src="selectedModelImage" 
                alt="" 
                class="me-2" 
                style="width:24px; height:24px;"
            >
            [[ selectedModelLabel ]]
            </button>

            <ul class="dropdown-menu" aria-labelledby="imageDropdown">
            <li v-for="model in models" :key="model.value">
                <a 
                class="dropdown-item d-flex align-items-center" 
                href="#" 
                @click.prevent="selectModel(model)"
                >
                <img 
                    :src="model.image" 
                    alt="" 
                    class="me-2" 
                    style="width:24px; height:24px;"
                >
                [[ model.label ]]
                </a>
            </li>
            </ul>
        </div>
        </div>
     
      <!-- Új checkbox + file input -->
  <label>
    <input type="checkbox" v-model="loadImage" /> Load initial image (for inpainting)
  </label>

  <div v-if="loadImage" style="margin-top:10px;">
    <!-- amikor kiválaszt egy fájlt, rögtön indul az onFileChange, ami hívja az uploadFile-t -->
    <input type="file" accept="image/*" @change="onFileChange">

    <!-- Preview -->
    <div style="margin-top:10px;">
      <img v-if="previewUrl" :src="previewUrl" alt="Image Preview"   style="max-height:200px; height:auto; max-width:100%;">
    </div>
  </div>
</div>
     <br>
        
        <input type="hidden" id="imageModel" name="imageModel" :value="selectedModel ? selectedModel.value : ''" required>

        <label for="resolution" class="form-label">Resolution (Width x Height)</label>
        <select id="resolution" name="resolution" class="form-select" required>
          <option value="512x512">512x512</option>
          <option value="768x512">768x512</option>
          <option value="512x768">512x768</option>
          <option value="512x1024">512x1024</option>
        </select>

        <label for="priority" class="form-label">Priority</label>
        <select id="priority"  class="form-select" required>
          <option value="1">1: cost 1 gen</option>
          <option value="2">1: cost 2 gen</option>
          <option value="3">3: cost 3 gen</option>
          <option value="4">4: cost 4 gen</option>
        </select>


        <label for="pprompt" class="form-label">Prompt positive</label>
        <textarea class="form-control" id="pprompt"  rows="3" required></textarea>
        <label for="nprompt" class="form-label">Prompt negative</label>
        <textarea class="form-control" id="nprompt"  rows="3" required></textarea>
      </div>
    <button type="button" class="btn btn-primary" @click="generatePhoto">Generate Photo</button>
    </form>
  </div>
  <div class="col-sm-7">
   Generated photo will show up here
  </div>
</div>


<script>
var myapp = Vue.createApp({
  delimiters: ['[[', ']]'],
  data() {
    return {
      selectedModel: null,
      models: [
        { value: "realistic", label: "Model Realistic", image: "{{asset('/images/model1.png')}}" },
        { value: "manga", label: "Model Manga", image: "{{asset('/images/model2.png')}}" },
        { value: "cartoon", label: "Model Cartoon", image: "{{asset('/images/model3.png')}}" }
      ],
      // Új változók
      loadImage: false,  //van-e betöltendő kép
      selectedFile: null,
      previewUrl: null,
      uploading: false,
      fileid: 0  //a szerver által visszaadott file id
    };
  },
  computed: {
    selectedModelLabel() {
      return this.selectedModel ? this.selectedModel.label : "Válassz modellt";
    },
    selectedModelImage() {
      return this.selectedModel ? this.selectedModel.image : null;
    }
  },
 methods: {
  selectModel(model) {
    this.selectedModel = model;
  },
  generatePhoto() {
    if (!this.selectedModel) {
      alert("Kérlek válassz egy modellt!");
      return;
    }
    const modelname = this.selectedModel.value;
    const resolution = document.getElementById('resolution').value;
    const priority = document.getElementById('priority').value;
    const promptpositive = document.getElementById('pprompt').value;
    const promptnegative = document.getElementById('nprompt').value;

    const requestData = {
      modelname,
      resolution,
      priority,
      promptpositive,
      promptnegative,
      fileid: this.fileid,  //feltöltött file id, ha van
      loadImage: this.loadImage //használjon-e bemeneti filet
    };

    fetch("{{ path('app_generatephotorow') }}", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-Requested-With": "XMLHttpRequest",
        "X-CSRF-TOKEN": "{{ csrf_token('generate_photorow') }}"
      },
      body: JSON.stringify(requestData)
    })
    .then(response => response.json())
    .then(data => console.log("Success:", data))
    .catch(error => console.error("Error:", error));

    console.log(JSON.stringify(requestData));
  },

  // fájlkiválasztás -> előnézet + automatikus feltöltés
  async onFileChange(event) {
    const file = event.target.files[0];
    if (!file) return;

    this.selectedFile = file;
    this.previewUrl = URL.createObjectURL(file);

    // rögtön indul a feltöltés
    await this.uploadFile();
  },

  async uploadFile() {
    if (!this.selectedFile) return;

    this.uploading = true;
    try {
      const formData = new FormData();
      formData.append("file", this.selectedFile);

      const response = await fetch("/useruploadfile", {
        method: "POST",
        body: formData
      });

      if (!response.ok) throw new Error("Upload failed");

      const result = await response.json();

      console.log("Server response:", result);
      alert("File uploaded successfully with ID: " + result.fileid);
      this.fileid = result.fileid;  //elmentjük a file id-t
    } catch (err) {
      console.error(err);
      alert("Upload error: " + err.message);
    } finally {
      this.uploading = false;
    }
  }
}

});

myapp.mount("#myapp");
</script>
{% endblock %}
